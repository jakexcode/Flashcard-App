{"version":3,"sources":["utils/api/index.js","Deck/DeckList.js","Home/index.js","Layout/Header.js","Deck/DeckForm.js","Deck/DeckEdit.js","Card/CardList.js","Deck/DeckView.js","Deck/DeckCreate.js","Layout/NotFound.js","Card/CardForm.js","Card/CardEdit.js","Card/CardCreate.js","Deck/StudyPage.js","Deck/StudyNotEnoughCards.js","Deck/StudyCard.js","Deck/Study.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","REACT_APP_API_BASE_URL","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","updateCard","updatedCard","append","DeckList","useState","decks","setDecks","history","useHistory","useEffect","deckLoad","list","map","className","length","description","to","title","onClick","window","confirm","then","push","Home","Header","DeckForm","onSubmit","initialState","setDeck","changeHandler","target","value","prevState","event","preventDefault","stopPropagation","htmlFor","type","required","placeholder","onChange","rows","DeckEdit","useParams","deckRead","child","goBack","updateDeck","savedDeck","CardList","onCardDelete","front","back","DeckView","loadDeck","confirmed","log","deleteCard","DeckCreate","createDeck","NotFound","CardForm","onDone","deckName","doneButton","setCard","tabIndex","CardEdit","doneHandler","deckResponse","cardResponse","cardFormEdit","CardCreate","createCard","StudyPage","children","StudyNotEnoughCards","cardCount","nextView","StudyCard","view","setView","flipped","setFlipped","Study","cardNumber","setCardNumber","cardTitle","Math","min","Layout","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.401bcc04.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\n const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n\n /**\n  * Defines the default headers for these functions to work with `json-server`\n  */\n const headers = new Headers();\n headers.append(\"Content-Type\", \"application/json\");\n \n /**\n  * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n  *\n  * This function is NOT exported because it is not needed outside of this file.\n  *\n  * @param deck\n  *  the deck instance\n  * @returns {*}\n  *  a copy of the deck instance with the `cards` property removed.\n  */\n function stripCards(deck) {\n   const { cards, ...deckWithoutCards } = deck;\n   return deckWithoutCards;\n }\n \n /**\n  * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n  *\n  * This function is NOT exported because it is not needed outside of this file.\n  *\n  * @param url\n  *  the url for the requst.\n  * @param options\n  *  any options for fetch\n  * @param onCancel\n  *  default value returned if the fetch is cancelled.\n  * @returns {Promise<Error|any>}\n  *  a promise that resolves to the `json` data or an error.\n  *  If the response is not in the 200 - 399 range the promise is rejected.\n  */\n \n async function fetchJson(url, options, onCancel) {\n   try {\n     const response = await fetch(url, options);\n \n     if (response.status < 200 || response.status > 399) {\n       throw new Error(`${response.status} - ${response.statusText}`);\n     }\n \n     if (response.status === 204) {\n       return null;\n     }\n \n     return await response.json();\n \n   } catch (error) {\n     if (error.name !== \"AbortError\") {\n       console.error(error.stack);\n       throw error;\n     }\n     return Promise.resolve(onCancel);\n   }\n }\n \n /**\n  * Retrieves all existing decks.\n  * @returns {Promise<[deck]>}\n  *  a promise that resolves to a possibly empty array of decks saved in the database.\n  */\n export async function listDecks(signal) {\n   const url = `${API_BASE_URL}/decks?_embed=cards`;\n   return await fetchJson(url, { signal }, []);\n }\n \n /**\n  * Saves deck to the database (public/data/db.json).\n  * There is no validation done on the deck object, any object will be saved.\n  * @param deck\n  *  the deck to save, which must not have an `id` property\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<deck>}\n  *  a promise that resolves the saved deck, which will now have an `id` property.\n  */\n export async function createDeck(deck, signal) {\n   const url = `${API_BASE_URL}/decks`;\n   const options = {\n     method: \"POST\",\n     headers,\n     body: JSON.stringify(stripCards(deck)),\n     signal,\n   };\n   return await fetchJson(url, options, {});\n }\n \n /**\n  * Retrieves the deck with the specified `deckId`\n  * @param deckId\n  *  the `id` property matching the desired deck.\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<any>}\n  *  a promise that resolves to the saved deck.\n  */\n export async function readDeck(deckId, signal) {\n   const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n   return await fetchJson(url, { signal }, {});\n }\n \n /**\n  * Updates an existing deck\n  * @param updatedDeck\n  *  the deck to save, which must have an `id` property.\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to the updated deck.\n  */\n export async function updateDeck(updatedDeck, signal) {\n   const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n   const options = {\n     method: \"PUT\",\n     headers,\n     body: JSON.stringify(stripCards(updatedDeck)),\n     signal,\n   };\n   return await fetchJson(url, options, updatedDeck);\n }\n \n /**\n  * Deletes the deck with the specified `deckId`.\n  * @param deckId\n  *  the id of the deck to delete\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to an empty object.\n  */\n export async function deleteDeck(deckId, signal) {\n   const url = `${API_BASE_URL}/decks/${deckId}`;\n   const options = { method: \"DELETE\", signal };\n   return await fetchJson(url, options);\n }\n \n /**\n  * Retrieves all cards associated with the specified `deckId`.\n  * @param deckId\n  *  the id of the target deck\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to a possible empty array of cards.\n  */\n export async function listCards(deckId, signal) {\n   const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n   return await fetchJson(url, { signal }, []);\n }\n \n /**\n  * Creates a new card associated with the specified `deckId`.\n  * There is no validation that there is an existing deck with the specified `deckId`.\n  * @param deckId\n  *  the id of the target deck\n  * @param card\n  *  the card to create, which must not have an `id` property\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to the new card, which will have an `id` property.\n  */\n export async function createCard(deckId, card, signal) {\n   // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n   // and the card is not related to the deck because the data types of the ID's are different.\n   const url = `${API_BASE_URL}/cards`;\n   card.deckId = Number(deckId);\n   const options = {\n     method: \"POST\",\n     headers,\n     body: JSON.stringify(card),\n     signal,\n   };\n   return await fetchJson(url, options, card);\n }\n \n /**\n  * Retrieves the card with the specified `cardId`\n  * @param cardId\n  *  the id of the target\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to the saved card.\n  */\n export async function readCard(cardId, signal) {\n   const url = `${API_BASE_URL}/cards/${cardId}`;\n   return await fetchJson(url, { signal }, {});\n }\n \n /**\n  * Updates an existing deck\n  * @param updatedCard\n  *  the card to save, which must have an `id` property.\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to the updated card.\n  */\n export async function updateCard(updatedCard, signal) {\n   const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n   const options = {\n     method: \"PUT\",\n     headers,\n     body: JSON.stringify(updatedCard),\n   };\n   return await fetchJson(url, options, updatedCard);\n }\n \n /**\n  * Deletes the card with the specified `cardId`.\n  * @param cardId\n  *  the id of the card to delete\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to an empty object.\n  */\n export async function deleteCard(cardId, signal) {\n   const url = `${API_BASE_URL}/cards/${cardId}`;\n   const options = { method: \"DELETE\", signal };\n   return await fetchJson(url, options);\n }","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\n\nfunction DeckList() {\n  const [decks, setDecks] = useState([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    async function deckLoad() {\n      const response = await listDecks();\n      setDecks(response);\n    }\n    deckLoad();\n  }, []);\n\n  function deleteHandler(deckId) {\n    const confirmed = window.confirm(\n      \"Delete this deck?\\n\\nYou will not be able to recover it.\"\n    );\n    if (confirmed) {\n      deleteDeck(deckId).then(history.push('/decks'));\n    }\n  }\n\n  const list = decks.map((deck) => (\n    <li\n      key={deck.id}\n      className=\"list-group-item list-group-item-action flex-column align-items-start\"\n    >\n      <div className=\"d-flex w-100 justify-content-between\">\n        <h5 className=\"mb-1\">{deck.name}</h5>\n        <small>{deck.cards.length} cards</small>\n      </div>\n      <p className=\"mb-1\">{deck.description}</p>\n      <Link\n        to={`/decks/${deck.id}`}\n        className=\"btn btn-secondary mr-2\"\n        title=\"Edit Deck\"\n      >\n        <span className=\"oi oi-eye\" /> View\n      </Link>\n      <Link\n        to={`/decks/${deck.id}/study`}\n        className=\"btn btn-primary\"\n        title=\"Study Deck\"\n      >\n        <span className=\"oi oi-book\" /> Study\n      </Link>\n      <button\n        className=\"btn btn-danger float-right\"\n        title=\"Delete deck\"\n        onClick={() => deleteHandler(deck.id)}\n      >\n        <span className=\"oi oi-trash p-1\" />\n      </button>\n    </li>\n  ));\n\n  return (\n    <>\n      <Link to=\"/decks/new\" className=\"btn btn-secondary\">\n        <span className=\"oi oi-plus\" /> Create Deck\n      </Link>\n      <ul className=\"list-group mt-2 deck-list\">{list}</ul>\n    </>\n  );\n}\n\nexport default DeckList;","import React from 'react';\nimport DeckList from '../Deck/DeckList';\n\nfunction Home() {\n  return (\n    <div className=\"Home container\">\n      <DeckList />\n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark \">\n      <div className=\"container text-info shadow-lg p-3 mb-5 bg-light rounded \">\n        <h1 className=\"display-3 \">Flashcard-O-Matic</h1>\n        <p className=\"fst-italic\">\n          Discover The Flashcard Difference\n        </p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","import React, { useState } from 'react';\n\nfunction DeckForm({\n  onSubmit,\n  onCancel,\n  initialState = { name: '', description: '' },\n}) {\n  const [deck, setDeck] = useState(initialState);\n\n  function changeHandler({ target: { name, value } }) {\n    setDeck((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n\n  function submitHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onSubmit(deck);\n  }\n\n  return (\n    <>\n      <form onSubmit={submitHandler} className=\"deck-edit\">\n        <fieldset>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              className=\"form-control\"\n              value={deck.name}\n              required={true}\n              placeholder=\"Deck Name\"\n              onChange={changeHandler}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              className=\"form-control\"\n              rows=\"4\"\n              required={true}\n              placeholder=\"Brief description of the deck\"\n              value={deck.description}\n              onChange={changeHandler}\n            />\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary mr-2\"\n            onClick={onCancel}\n          >\n            Cancel\n          </button>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </fieldset>\n      </form>\n    </>\n  );\n}\n\nexport default DeckForm;","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport DeckForm from \"./DeckForm\";\nimport { readDeck, updateDeck } from \"../utils/api\";\n\nfunction DeckEdit() {\n  const history = useHistory();\n  const { deckId } = useParams();\n\n  const [deck, setDeck] = useState({ name: \"\", description: \"\" });\n\n  useEffect(() => {\n    async function deckRead() {\n      const response = await readDeck(deckId);\n      setDeck(response);\n    }\n    deckRead();\n  }, [deckId]);\n\n  function cancelHandler() {\n    history.goBack();\n  }\n\n  function submitHandler(updatedDeck) {\n    updateDeck(updatedDeck).then((savedDeck) =>\n      history.push(`/decks/${savedDeck.id}`)\n    );\n  }\n\n  const child = deck.id ? (\n    <DeckForm\n      onCancel={cancelHandler}\n      onSubmit={submitHandler}\n      initialState={deck}\n    />\n  ) : (\n    <p>Loading...</p>\n  );\n\n  return (\n    <>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Edit Deck\n          </li>\n        </ol>\n      </nav>\n      <h1>Edit Deck</h1>\n      {child}\n    </>\n  );\n}\n\nexport default DeckEdit;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction CardList({ deck, onCardDelete }) {\n  const { cards = [] } = deck;\n\n  const list = cards.map((card) => (\n    <li\n      key={card.id}\n      className=\"list-group-item list-group-item-action flex-column align-items-start\"\n    >\n      <div className=\"row\">\n        <div className=\"col-md-10\">\n          <div className=\"row\">\n            <div className=\"col\">{card.front}</div>\n            <div className=\"col\">{card.back}</div>\n          </div>\n        </div>\n        <div className=\"col text-right\">\n          <Link\n            to={`/decks/${deck.id}/cards/${card.id}/edit`}\n            className=\"btn btn-secondary mr-2\"\n            title=\"Edit Card\"\n          >\n            <span className=\"oi oi-pencil\" /> Edit\n          </Link>\n          <button className=\"btn btn-danger m-1\" title=\"Delete Card\">\n            <span\n              className=\"oi oi-trash p-1\"\n              onClick={() => onCardDelete(card.id)}\n            />\n          </button>\n        </div>\n      </div>\n    </li>\n  ));\n\n  return (\n    <div className=\"mt-4 card-list\">\n      <h3>Cards</h3>\n      <ul className=\"list-group\">{list}</ul>\n    </div>\n  );\n}\n\nexport default CardList;","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { deleteCard, deleteDeck, readDeck } from \"../utils/api\";\nimport CardList from \"../Card/CardList\";\n\nfunction DeckView() {\n  const [deck, setDeck] = useState({ cards: [] });\n  const { deckId } = useParams();\n  const history = useHistory();\n\n  useEffect(() => {\n    async function deckLoad() {\n      const response = await readDeck(deckId);\n      setDeck(response);\n    }\n    deckLoad();\n  }, [deckId]);\n\n  function loadDeck() {\n    readDeck(deckId).then(setDeck);\n  }\n\n  function deleteCardHandler(cardId) {\n    const confirmed = window.confirm(\n      \"Delete this card?\\n\\nYou will not be able to recover it.\"\n    );\n    if (confirmed) {\n      console.log(\"deleteCardHandler\", confirmed, cardId);\n      deleteCard(cardId).then(loadDeck);\n    }\n  }\n\n  function deleteHandler() {\n    const confirmed = window.confirm(\n      \"Delete this deck?\\n\\nYou will not be able to recover it.\"\n    );\n    if (confirmed) {\n      deleteDeck(deck.id).then(() => history.push(\"/decks\"));\n    }\n  }\n\n  return (\n    <main className=\"container deck-view\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            {deck.name}\n          </li>\n        </ol>\n      </nav>\n      <div className=\"media mb-2\">\n        <div className=\"media-body\">\n          <h5 className=\"mt-0\">{deck.name}</h5>\n          {deck.description}\n        </div>\n      </div>\n      <Link\n        to={`/decks/${deck.id}/edit`}\n        className=\"btn btn-secondary mr-2\"\n        title=\"Edit Deck\"\n      >\n        <span className=\"oi oi-pencil\" /> Edit\n      </Link>\n      <Link\n        to={`/decks/${deck.id}/study`}\n        className=\"btn btn-primary mr-2\"\n        title=\"Study Deck\"\n      >\n        <span className=\"oi oi-book\" /> Study\n      </Link>\n      <Link\n        to={`/decks/${deck.id}/cards/new`}\n        className=\"btn btn-primary\"\n        title=\"Add Card\"\n      >\n        <span className=\"oi oi-plus\" /> Add Cards\n      </Link>\n      <button className=\"btn btn-danger float-right\" title=\"Delete deck\">\n        <span className=\"oi oi-trash p-1\" onClick={deleteHandler} />\n      </button>\n      <CardList deck={deck} onCardDelete={deleteCardHandler} />\n    </main>\n  );\n}\n\nexport default DeckView;","import React from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport DeckForm from \"./DeckForm\";\nimport { createDeck } from \"../utils/api\";\n\nfunction DeckCreate() {\n  const history = useHistory();\n\n  function cancelHandler() {\n    history.goBack();\n  }\n\n  function submitHandler(deck) {\n    createDeck(deck).then((savedDeck) =>\n      history.push(`/decks/${savedDeck.id}`)\n    );\n  }\n\n  return (\n    <>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Create Deck\n          </li>\n        </ol>\n      </nav>\n      <h1>Create Deck</h1>\n      <DeckForm onCancel={cancelHandler} onSubmit={submitHandler} />\n    </>\n  );\n}\n\nexport default DeckCreate;","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;","import React, { useState } from \"react\";\n\nfunction CardForm({\n  onSubmit,\n  onDone,\n  deckName = \"Loading..\",\n  initialState,\n  doneButton = \"Done\",\n}) {\n  const [card, setCard] = useState(initialState);\n\n  function changeHandler({ target: { name, value } }) {\n    setCard((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n\n  function submitHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onSubmit({ ...card });\n    setCard({ front: \"\", back: \"\" });\n  }\n\n  return (\n    <form onSubmit={submitHandler} className=\"card-form\">\n      <fieldset>\n        <legend>{deckName}: Add Card</legend>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"front\">Front</label>\n          <textarea\n            id=\"front\"\n            name=\"front\"\n            tabIndex=\"1\"\n            className=\"form-control\"\n            rows=\"4\"\n            required={true}\n            placeholder=\"Enter question here\"\n            value={card.front}\n            onChange={changeHandler}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"back\">Back</label>\n          <textarea\n            id=\"back\"\n            name=\"back\"\n            tabIndex=\"2\"\n            className=\"form-control\"\n            rows=\"4\"\n            required={true}\n            placeholder=\"Enter answer here\"\n            value={card.back}\n            onChange={changeHandler}\n          />\n        </div>\n\n        <button\n          className=\"btn btn-secondary mr-2\"\n          onClick={onDone}\n          tabIndex=\"4\"\n        >\n          {doneButton}\n        </button>\n        <button type=\"submit\" className=\"btn btn-primary\" tabIndex=\"3\">\n          Save\n        </button>\n      </fieldset>\n    </form>\n  );\n}\n\nexport default CardForm;","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { readDeck, readCard, updateCard } from \"../utils/api\";\nimport CardForm from \"./CardForm\";\n\nfunction CardEdit() {\n  const [card, setCard] = useState({ front: \"\", back: \"\" });\n  const [deck, setDeck] = useState({ cards: [] });\n\n  const history = useHistory();\n  const { deckId, cardId } = useParams();\n\n  useEffect(() => {\n    async function deckRead() {\n      const deckResponse = await readDeck(deckId);\n      setDeck(deckResponse);\n      const cardResponse = await readCard(cardId);\n      setCard(cardResponse);\n    }\n    deckRead();\n  }, [deckId, cardId]);\n\n  async function submitHandler(card) {\n    await updateCard(card);\n    doneHandler(card);\n  }\n\n  function doneHandler() {\n    history.push(`/decks/${deck.id}`);\n  }\n\n  const cardFormEdit = card.id ? (\n    <CardForm\n      onSubmit={submitHandler}\n      onDone={doneHandler}\n      deckName={deck.name}\n      initialState={card}\n      doneButton=\"Cancel\"\n    />\n  ) : (\n    <p>Loading...</p>\n  );\n  return (\n    <>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>Deck {deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Edit Card {cardId}\n          </li>\n        </ol>\n      </nav>\n      <h2>Edit Card</h2>\n      {cardFormEdit}\n    </>\n  );\n}\n\nexport default CardEdit;","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport { readDeck, createCard } from \"../utils/api\";\nimport CardForm from \"./CardForm\";\n\nfunction CardCreate() {\n  const [deck, setDeck] = useState({ cards: [] });\n  const { deckId } = useParams();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    async function deckRead() {\n      const response = await readDeck(deckId);\n      setDeck(response);\n    }\n    deckRead();\n  }, [deckId]);\n\n  function submitHandler(card) {\n    createCard(deckId, card);\n  }\n\n  function doneHandler() {\n    history.push(`/decks/${deckId}`);\n  }\n  return (\n    <>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Add Card\n          </li>\n        </ol>\n      </nav>\n      <CardForm\n        deckName={deck.name}\n        initialState={deck}\n        onSubmit={submitHandler}\n        onDone={doneHandler}\n      />\n    </>\n  );\n}\n\nexport default CardCreate;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction StudyPage({ deckId, name, children }) {\n  return (\n    <main className=\"container study-page\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Study\n          </li>\n        </ol>\n      </nav>\n      <h1>{name}: Study</h1>\n      {children}\n    </main>\n  );\n}\n\nexport default StudyPage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction StudyNotEnoughCards({ deckId, cardCount }) {\n  return (\n    <>\n      <h2>Not enough cards.</h2>\n      <p>\n        You need at least 3 cards to study. There are {cardCount} cards in this\n        deck.\n      </p>\n      <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary\">\n        <span className=\"oi oi-plus\" /> Add Cards\n      </Link>\n    </>\n  );\n}\n\nexport default StudyNotEnoughCards;","import React, { useEffect, useState } from 'react';\n\nconst nextView = {\n  front: 'back',\n  back: 'front',\n};\n\nfunction StudyCard({ card = {}, title, children }) {\n  const [view, setView] = useState('front');\n  const [flipped, setFlipped] = useState(false);\n\n  function flipHandler() {\n    setView((prevState) => nextView[prevState]);\n    setFlipped(true);\n  }\n\n  useEffect(() => {\n    setView('front');\n    setFlipped(false);\n  }, [card]);\n\n  return (\n    <div className={`card ${view} study-card`}>\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{title}</h5>\n        <p className=\"card-text\">{card[view]}</p>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary mr-2\"\n          onClick={flipHandler}\n        >\n          Flip\n        </button>\n        {flipped && children}\n      </div>\n    </div>\n  );\n}\n\nexport default StudyCard;","import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport StudyPage from \"./StudyPage\";\nimport StudyNotEnoughCards from \"./StudyNotEnoughCards\";\nimport { readDeck } from \"../utils/api\";\nimport StudyCard from \"./StudyCard\";\n\n\nfunction Study() {\n  const [deck, setDeck] = useState({ name: \"Loading..\", cards: [] });\n  const [cardNumber, setCardNumber] = useState(1);\n\n  const { deckId } = useParams();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    async function deckLoad() {\n      const response = await readDeck(deckId);\n      setDeck(response);\n    }\n    deckLoad();\n  }, [deckId]);\n\n  const cardCount = deck.cards.length;\n\n  const nextHandler = () => {\n    if (cardNumber === cardCount) {\n      const returnToHomePage = !window.confirm(\n        \"Restart cards?\\n\\nClick 'Cancel' to return to the home page.\"\n      );\n      return returnToHomePage ? history.push(\"/\") : setCardNumber(1);\n    }\n    setCardNumber((prevState) => Math.min(cardCount, prevState + 1));\n  };\n\n  const cardTitle = `Card ${cardNumber} of ${cardCount}`;\n\n  const card = deck.cards[cardNumber - 1];\n\n  if (cardCount <= 2) {\n    return (\n      <StudyPage name={deck.name} deckId={deckId}>\n        <StudyNotEnoughCards deckId={deckId} cardCount={cardCount} />\n      </StudyPage>\n    );\n  }\n\n  return (\n    <StudyPage name={deck.name} deckId={deckId}>\n      <StudyCard card={card} title={cardTitle}>\n        <button type=\"button\" className=\"btn btn-primary\" onClick={nextHandler}>\n          Next\n        </button>\n      </StudyCard>\n    </StudyPage>\n  );\n}\n\nexport default Study;","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Home from \"../Home\";\nimport Header from \"./Header\";\nimport DeckEdit from \"../Deck/DeckEdit\";\nimport DeckView from \"../Deck/DeckView\";\nimport DeckCreate from \"../Deck/DeckCreate\";\nimport NotFound from \"./NotFound\";\nimport CardEdit from \"../Card/CardEdit\";\nimport CardCreate from \"../Card/CardCreate\";\nimport Study from \"../Deck/Study\";\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/decks/new\">\n            <DeckCreate />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <DeckEdit />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <CardCreate />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <CardEdit />\n          </Route>\n          <Route exact={true} path=\"/decks/:deckId\">\n            <DeckView />\n          </Route>\n          <Route exact={true} path=\"/decks\">\n            <Redirect to=\"/\" />\n          </Route>\n          <Route exact={true} path=\"/\">\n            <Home />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}